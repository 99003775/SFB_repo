ASAP2_VERSION 1 60
/begin PROJECT  SFB "SFB 24V"

  /begin HEADER ""
    VERSION   "0.0.0.0"
    PROJECT_NO SFB_SW1511_HW865
  /end HEADER

  /begin MODULE SFB    ""

    /begin A2ML

      /*********************** start of PROTOCOL_LAYER ****************************/ 

      struct Protocol_Layer {     /* At MODULE */ 

        uint;                                /* XCP protocol layer version */ 
                                             /* e.g. "1.0" = 0x0100            */ 
 
        uint;                                /* T1 [ms] */ 
        uint;                                /* T2 [ms] */ 
        uint;                                /* T3 [ms] */
        uint;                                /* T4 [ms] */ 
        uint;                                /* T5 [ms] */ 
        uint;                                /* T6 [ms] */ 
        uint;                                /* T7 [ms] */ 
 
        uchar;                               /* MAX_CTO */ 
        uint;                                /* MAX_DTO */ 
 
        enum {                               /* BYTE_ORDER */ 
             "BYTE_ORDER_MSB_LAST"  = 0, 
             "BYTE_ORDER_MSB_FIRST" = 1 
             }; 
 
        enum {                               /* ADDRESS_GRANULARITY */ 
             "ADDRESS_GRANULARITY_BYTE"    = 1, 
             "ADDRESS_GRANULARITY_WORD"    = 2, 
             "ADDRESS_GRANULARITY_DWORD"   = 4 
             }; 
 
        taggedstruct {                       /* optional                     */ 
     
          ("OPTIONAL_CMD" enum {             /* XCP-Code of optional command */  
                                             /* supported by the slave       */ 
 
            "GET_COMM_MODE_INFO"       = 0xFB, 
            "GET_ID"                   = 0xFA, 
            "SET_REQUEST"              = 0xF9, 
            "GET_SEED"                 = 0xF8, 
            "UNLOCK"                   = 0xF7, 
            "SET_MTA"                  = 0xF6, 
            "UPLOAD"                   = 0xF5, 
            "SHORT_UPLOAD"             = 0xF4, 
            "BUILD_CHECKSUM"           = 0xF3, 
            "TRANSPORT_LAYER_CMD"      = 0xF2, 
            "USER_CMD"                 = 0xF1, 
            "DOWNLOAD"                 = 0xF0, 
            "DOWNLOAD_NEXT"            = 0xEF, 
            "DOWNLOAD_MAX"             = 0xEE, 
            "SHORT_DOWNLOAD"           = 0xED, 
            "MODIFY_BITS"              = 0xEC, 
            "SET_CAL_PAGE"             = 0xEB, 
            "GET_CAL_PAGE"             = 0xEA, 
            "GET_PAG_PROCESSOR_INFO"   = 0xE9, 
            "GET_SEGMENT_INFO"         = 0xE8, 
            "GET_PAGE_INFO"            = 0xE7, 
            "SET_SEGMENT_MODE"         = 0xE6, 
            "GET_SEGMENT_MODE"         = 0xE5, 
            "COPY_CAL_PAGE"            = 0xE4, 
            "CLEAR_DAQ_LIST"           = 0xE3, 
            "SET_DAQ_PTR"              = 0xE2, 
            "WRITE_DAQ"                = 0xE1, 
            "SET_DAQ_LIST_MODE"        = 0xE0, 
            "GET_DAQ_LIST_MODE"        = 0xDF, 
            "START_STOP_DAQ_LIST"      = 0xDE, 
            "START_STOP_SYNCH"         = 0xDD, 
            "GET_DAQ_CLOCK"            = 0xDC, 
            "READ_DAQ"                 = 0xDB, 
            "GET_DAQ_PROCESSOR_INFO"   = 0xDA, 
            "GET_DAQ_RESOLUTION_INFO"  = 0xD9, 
            "GET_DAQ_LIST_INFO"        = 0xD8, 
            "GET_DAQ_EVENT_INFO"       = 0xD7, 
            "FREE_DAQ"                 = 0xD6, 
            "ALLOC_DAQ"                = 0xD5, 
            "ALLOC_ODT"                = 0xD4, 
            "ALLOC_ODT_ENTRY"          = 0xD3, 
            "PROGRAM_START"            = 0xD2, 
            "PROGRAM_CLEAR"            = 0xD1, 
            "PROGRAM"                  = 0xD0, 
            "PROGRAM_RESET"            = 0xCF, 
            "GET_PGM_PROCESSOR_INFO"   = 0xCE, 
            "GET_SECTOR_INFO"          = 0xCD, 
            "PROGRAM_PREPARE"          = 0xCC, 
            "PROGRAM_FORMAT"           = 0xCB, 
            "PROGRAM_NEXT"             = 0xCA, 
            "PROGRAM_MAX"              = 0xC9, 
            "PROGRAM_VERIFY"           = 0xC8 
 
                     })*;           
                                        
        "COMMUNICATION_MODE_SUPPORTED" taggedunion { /* optional modes supported */ 
          "BLOCK" taggedstruct { 
            "SLAVE";                  /* Slave Block Mode supported  */ 
            "MASTER" struct {         /* Master Block Mode supported */ 
              uchar;  /* MAX_BS */ 
              uchar;  /* MIN_ST */ 
            }; 
          }; 
          "INTERLEAVED" uchar;    /* QUEUE_SIZE */  
        }; 
 
        "SEED_AND_KEY_EXTERNAL_FUNCTION" char[256];  /* Name of the Seed&Key function */ 
                                                      /* including file extension      */ 
                                                      /* without path                  */ 
        }; 
 
      }; /********************* end of PROTOCOL_LAYER *****************************/ 
 
      /***************************** start of DAQ *********************************/ 
      struct Daq {                         /* DAQ supported, at MODULE*/ 
        enum {                             /* DAQ_CONFIG_TYPE */ 
             "STATIC"  = 0, 
             "DYNAMIC" = 1 
             }; 
 
        uint;                               /* MAX_DAQ */ 
        uint;                               /* MAX_EVENT_CHANNEL */ 
        uchar;                              /* MIN_DAQ */ 
 
        enum {                            /* OPTIMISATION_TYPE */ 
          "OPTIMISATION_TYPE_DEFAULT"            = 0, 
          "OPTIMISATION_TYPE_ODT_TYPE_16"        = 1, 
          "OPTIMISATION_TYPE_ODT_TYPE_32"        = 2, 
          "OPTIMISATION_TYPE_ODT_TYPE_64"        = 3, 
          "OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT" = 4, 
          "OPTIMISATION_TYPE_MAX_ENTRY_SIZE"     = 5 
        }; 
 
        enum {                           /* ADDRESS_EXTENSION */ 
          "ADDRESS_EXTENSION_FREE" = 0, 
          "ADDRESS_EXTENSION_ODT"  = 1, 
          "ADDRESS_EXTENSION_DAQ"  = 3 
        }; 
 
 
        enum {                           /* IDENTIFICATION_FIELD */ 
          "IDENTIFICATION_FIELD_TYPE_ABSOLUTE"              = 0, 
          "IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE"         = 1, 
          "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD"         = 2, 
          "IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED" = 3 
        }; 
   
 
        enum {                        /* GRANULARITY_ODT_ENTRY_SIZE_DAQ */ 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE"    = 1, 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD"    = 2, 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD"   = 4, 
          "GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG"   = 8 
        }; 
 
        uchar;                              /* MAX_ODT_ENTRY_SIZE_DAQ */ 
 
        enum {                              /* OVERLOAD_INDICATION */ 
          "NO_OVERLOAD_INDICATION"    = 0, 
          "OVERLOAD_INDICATION_PID"   = 1, 
          "OVERLOAD_INDICATION_EVENT" = 2 
        }; 
 
        taggedstruct {                      /* optional */ 
          "PRESCALER_SUPPORTED"; 
          "RESUME_SUPPORTED"; 
 
          block "STIM" struct {             /* STIM supported */ 
 
            enum {                      /* GRANULARITY_ODT_ENTRY_SIZE_STIM */ 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE"   = 1, 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD"   = 2, 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD"  = 4, 
              "GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG"  = 8 
            }; 
 
            uchar;                          /* MAX_ODT_ENTRY_SIZE_STIM */ 
 
            taggedstruct {                  /* bitwise stimulation */ 
              "BIT_STIM_SUPPORTED"; 
            }; 
          }; 
           
          block "TIMESTAMP_SUPPORTED" struct {  
            uint;                           /* TIMESTAMP_TICKS */ 
            enum { /* TIMESTAMP_SIZE */ 
              "NO_TIME_STAMP" = 0, 
              "SIZE_BYTE"     = 1, 
              "SIZE_WORD"     = 2, 
              "SIZE_DWORD"    = 4 
            }; 
            enum { /* RESOLUTION OF TIMESTAMP */ 
              "UNIT_1NS"   = 0, 
              "UNIT_10NS"  = 1, 
              "UNIT_100NS" = 2, 
              "UNIT_1US"   = 3, 
              "UNIT_10US"  = 4, 
              "UNIT_100US" = 5, 
              "UNIT_1MS"   = 6, 
              "UNIT_10MS"  = 7, 
              "UNIT_100MS" = 8, 
              "UNIT_1S"    = 9 
            }; 
            taggedstruct { 
              "TIMESTAMP_FIXED"; 
            }; 
          }; 
 
          "PID_OFF_SUPPORTED"; 
 
          /************************ start of DAQ_LIST *************************/ 
 
          (block "DAQ_LIST" struct {          /* DAQ_LIST                    */ 
            /* multiple possible           */ 
            uint;                             /* DAQ_LIST_NUMBER             */ 
            taggedstruct {                            /* optional */ 
              "DAQ_LIST_TYPE" enum {               
                "DAQ"      = 1,               /* DIRECTION = DAQ only     */ 
                "STIM"     = 2,               /* DIRECTION = STIM only    */ 
                "DAQ_STIM" = 3                /* both directions possible */ 
                /* but not simultaneously   */ 
              }; 
 
              "MAX_ODT"         uchar;        /* MAX_ODT         */ 
              "MAX_ODT_ENTRIES" uchar;        /* MAX_ODT_ENTRIES */ 
 
              "FIRST_PID" uchar;              /* FIRST_PID for this DAQ_LIST */ 
              "EVENT_FIXED" uint;             /* this DAQ_LIST always        */ 
              /* in this event               */ 
              block "PREDEFINED" taggedstruct { /* predefined                */ 
                /* not configurable DAQ_LIST */ 
                (block "ODT" struct { 
                  uchar;                   /* ODT number */ 
                  taggedstruct { 
                    ("ODT_ENTRY" struct { 
                      uchar;   /* ODT_ENTRY number            */ 
                      ulong;   /* address of element                 */ 
                      uchar;   /* address extension of element */ 
                      uchar;   /* size of element [AG]                */ 
                      uchar;   /* BIT_OFFSET                          */ 
                    })*; 
                  }; /* end of ODT_ENTRY */ 
                })*; /* end of ODT */ 
              }; /* end of PREDEFINED */ 
            }; 
          })*;/********************* end of DAQ_LIST ***************************/ 
 
          /************************* start of EVENT ****************************/ 
   
          (block "EVENT" struct {             /* EVENT               */ 
            /* multiple possible   */ 
            char[101];                        /* EVENT_CHANNEL_NAME       */ 
            char[9];                          /* EVENT_CHANNEL_SHORT_NAME */ 
            uint;                             /* EVENT_CHANNEL_NUMBER     */ 
   
            enum { 
              "DAQ"      = 1,                 /* only DAQ_LISTs         */ 
              /* with DIRECTION = DAQ   */ 
              "STIM"     = 2,                 /* only DAQ_LISTs         */ 
              /* with DIRECTION = STIM  */ 
              "DAQ_STIM" = 3                  /* both kind of DAQ_LISTs */ 
            }; 
   
            uchar;                            /* MAX_DAQ_LIST */ 
            uchar;                            /* TIME_CYCLE   */ 
            uchar;                            /* TIME_UNIT    */ 
            uchar;                            /* PRIORITY     */ 
   
          })*;/******************** end of EVENT ********************************/ 
 
        }; /* end of optional at DAQ */ 
 
      }; /************************* end of DAQ *************************************/ 
 
 
      /**************************** start of DAQ_EVENT *****************************/ 

       taggedunion Daq_Event {         /* at MEASUREMENT */ 
        "FIXED_EVENT_LIST" taggedstruct { 
          ("EVENT" uint)* ; 
        }; 
        "VARIABLE" taggedstruct { 
          block "AVAILABLE_EVENT_LIST" taggedstruct { 
            ("EVENT" uint)*; 
          }; 
          block "DEFAULT_EVENT_LIST" taggedstruct { 
            ("EVENT" uint)*; 
          }; 
        }; 
      }; /************************* end of DAQ_EVENT *******************************/ 
 

      /**************************** start of PAG ***********************************/ 

      struct Pag {                  /* PAG supported, at MODULE */ 
        uchar;                      /* MAX_SEGMENTS */ 
        taggedstruct {              /* optional */ 
          "FREEZE_SUPPORTED"; 
        }; 

      }; /************************* end of PAG *************************************/ 
       
 
      /**************************** start of PGM ***********************************/ 
 
      struct Pgm {                  /* PGM supported, at MODULE */ 
 
        enum { 
          "PGM_MODE_ABSOLUTE"                = 1, 
          "PGM_MODE_FUNCTIONAL"              = 2, 
          "PGM_MODE_ABSOLUTE_AND_FUNCTIONAL" = 3 
        }; 
        uchar;                               /* MAX_SECTORS */ 
        uchar;                               /* MAX_CTO_PGM */ 

        taggedstruct {                       /* optional                */ 
          (block "SECTOR" struct {           /* SECTOR                  */ 
            /* multiple possible       */ 
            char[101];                       /* SECTOR_NAME             */ 
            uchar;                           /* SECTOR_NUMBER           */ 
            ulong;                           /* Address                 */ 
            ulong;                           /* Length                  */ 
            uchar;                           /* CLEAR_SEQUENCE_NUMBER   */ 
            uchar;                           /* PROGRAM_SEQUENCE_NUMBER */ 
            uchar;                           /* PROGRAM_METHOD          */ 
          })*; /* end of SECTOR */ 
                                        
          "COMMUNICATION_MODE_SUPPORTED" taggedunion { /* optional modes supported */ 
            "BLOCK" taggedstruct { 
              "SLAVE";                  /* Slave Block Mode supported  */ 
              "MASTER" struct {         /* Master Block Mode supported */ 
                uchar;  /* MAX_BS_PGM */ 
                uchar;  /* MIN_ST_PGM */ 
              }; 
            }; 
            "INTERLEAVED" uchar;    /* QUEUE_SIZE_PGM */  
          }; 
        }; 
      }; /************************** end of PGM *************************************/ 
 
 
      /***************************** start of SEGMENT *******************************/ 
 
      struct Segment {               /* at MEMORY_SEGMENT */ 
        uchar;                               /* SEGMENT_NUMBER     */ 
        uchar;                               /* number of pages    */ 
        uchar;                               /* ADDRESS_EXTENSION  */ 
        uchar;                               /* COMPRESSION_METHOD */ 
        uchar;                               /* ENCRYPTION_METHOD  */ 
 
        taggedstruct {                       /* optional           */ 
          block "CHECKSUM" struct { 
            enum {                           /* checksum type      */ 
              "XCP_ADD_11"       =   1, 
              "XCP_ADD_12"       =   2, 
              "XCP_ADD_14"       =   3, 
              "XCP_ADD_22"       =   4, 
              "XCP_ADD_24"       =   5, 
              "XCP_ADD_44"       =   6, 
              "XCP_CRC_16"       =   7, 
              "XCP_CRC_16_CITT"  =   8, 
              "XCP_CRC_32"       =   9, 
              "XCP_USER_DEFINED" = 255 
            }; 
 
            taggedstruct { 
              "MAX_BLOCK_SIZE"              ulong ;    /* maximum block size            */ 
              /* for checksum calculation      */ 
              "EXTERNAL_FUNCTION" char[256];           /* Name of the Checksum function */ 
              /* including file extension      */ 
              /* without path                  */ 
            }; 
          }; 
 
          (block "PAGE" struct {               /* PAGES for this SEGMENT */ 
            /* multiple possible      */ 
            uchar;                             /* PAGE_NUMBER            */ 
 
            enum {            /* ECU_ACCESS_TYPE */ 
              "ECU_ACCESS_NOT_ALLOWED"      = 0, 
              "ECU_ACCESS_WITHOUT_XCP_ONLY" = 1, 
              "ECU_ACCESS_WITH_XCP_ONLY"    = 2, 
              "ECU_ACCESS_DONT_CARE"        = 3 
            }; 
 
            enum {       /* XCP_READ_ACCESS_TYPE */ 
              "XCP_READ_ACCESS_NOT_ALLOWED"      = 0, 
              "XCP_READ_ACCESS_WITHOUT_ECU_ONLY" = 1, 
              "XCP_READ_ACCESS_WITH_ECU_ONLY"    = 2, 
              "XCP_READ_ACCESS_DONT_CARE"        = 3 
            }; 
 
            enum {      /* XCP_WRITE_ACCESS_TYPE */ 
              "XCP_WRITE_ACCESS_NOT_ALLOWED"      = 0, 
              "XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY" = 1, 
              "XCP_WRITE_ACCESS_WITH_ECU_ONLY"    = 2, 
              "XCP_WRITE_ACCESS_DONT_CARE"        = 3 
            }; 
            taggedstruct { 
              "INIT_SEGMENT" uchar; /* references segment that initialises this page */ 
            }; 
 
          })*; /* end of PAGE */                 
 
          (block "ADDRESS_MAPPING" struct {  /* multiple possible   */ 
            ulong;        /* source address      */ 
            ulong;        /* destination address */ 
            ulong;        /* length              */ 
          })*; 
 
          "PGM_VERIFY" ulong; /* verification value for PGM */ 
        }; /* end of optional */ 
 
      }; /************************** end of SEGMENT *********************************/ 
 
      /*********************** start of Common Parameters ***************************/ 

      taggedstruct Common_Parameters {  
 
        block "PROTOCOL_LAYER" struct Protocol_Layer; 
 
        block "SEGMENT" struct Segment; 
 
        block "DAQ" struct Daq; 
        block "PAG" struct Pag; 
        block "PGM" struct Pgm; 
 
        block "DAQ_EVENT" taggedunion Daq_Event; 
 
      }; /******************** end of Common Parameters *****************************/ 


      /************************************************************************************/
      /* ASAP2 meta language for XCP on CAN V1.0                                          */
      /************************************************************************************/

      /************************ start of CAN **********************************************/
      struct CAN_Parameters { /* At MODULE */
        uint; /* XCP on CAN version */
        /* e.g. "1.0" = 0x0100 */
        taggedstruct { /* optional */
          "CAN_ID_BROADCAST" ulong; /* Auto detection CAN-ID */
          /* master -> slaves */
          /* Bit31= 1: extended identifier */
          "CAN_ID_MASTER" ulong;    /* CMD/STIM CAN-ID */
          /* master -> slave */
          /* Bit31= 1: extended identifier */
          "CAN_ID_SLAVE" ulong;     /* RES/ERR/EV/SERV/DAQ CAN-ID */
          /* slave -> master */
          /* Bit31= 1: extended identifier */
          "BAUDRATE" ulong;         /* BAUDRATE [Hz] */
          "SAMPLE_POINT" uchar;     /* sample point */
          /* [% complete bit time] */
          "SAMPLE_RATE" enum {
            "SINGLE" = 1,           /* 1 sample per bit */
            "TRIPLE" = 3            /* 3 samples per bit */
          };
          "BTL_CYCLES" uchar;       /* BTL_CYCLES */
          /* [slots per bit time] */
          "SJW" uchar;              /* length synchr. segment */
          /* [BTL_CYCLES] */
          "SYNC_EDGE" enum {
            "SINGLE" = 1,           /* on falling edge only */
            "DUAL" = 2              /* on falling and rising edge */
          };
          "MAX_DLC_REQUIRED";       /* master to slave frames */
          /* always to have DLC = MAX_DLC = 8 */
          (block "DAQ_LIST_CAN_ID" struct { /* At IF_DATA DAQ */
            uint;                   /* reference to DAQ_LIST_NUMBER */
            taggedstruct {          /* exclusive tags */
              /* either VARIABLE or FIXED */
              "VARIABLE";
              "FIXED" ulong;        /* this DAQ_LIST always */
              /* on this CAN_ID */
            };
          })*;
        };
      }; /************************* end of CAN ***********************************/


      /************************ start of TCP_IP ***********************************/

      struct TCP_IP_Parameters {

        uint; /* XCP on UDP_IP version */
        /* e.g. "1.0" = 0x0100 */
        uint; /* PORT */

        taggedunion {
          "HOST_NAME" char[256];
          "ADDRESS" char[15];
        };

      }; /************************* end of TCP_IP ***********************************/


      block "IF_DATA" taggedunion if_data {
        "XCP" struct {
        
          taggedstruct Common_Parameters ; /* default parameters */

          taggedstruct { /* transport layer specific parameters  */
            /* overruling of the default parameters */
        
            block "XCP_ON_CAN" struct {
        
              struct CAN_Parameters ;                   /* specific for CAN      */
              taggedstruct Common_Parameters;           /* overruling of default */
            
            };
        
            block "XCP_ON_TCP_IP" struct {
        
              struct TCP_IP_Parameters ;                /* specific for TCP_IP   */
              taggedstruct Common_Parameters;           /* overruling of default */
        
            };           
          };
        };
      };
    /end A2ML


    /begin MOD_COMMON  ""
      DEPOSIT          ABSOLUTE
      BYTE_ORDER       MSB_FIRST
    /end MOD_COMMON

    /begin MOD_PAR     ""
      VERSION          "SFB 0.0.0.0" /*TODO: pull from version.c? How is this different from EPK?*/
      ADDR_EPK         0x0000 /* @ECU_Address@EPK@ */  /* EPK */
      EPK              "SW1511-DS000-DV00-mmm dd yyyy-0_0_0_0" /*TODO: should match EPK[] in version.c can we pull it from there?*/      
      CUSTOMER_NO      ""
      USER             ""
      PHONE_NO         ""
      ECU              "SFB"
      CPU_TYPE         "Fujitsu FR81"
      
      //MEMORY_LAYOUT    PRG_CODE 0x00000000 0x00010000 -1 -1 -1 -1 -1

      /begin MEMORY_SEGMENT AppCode
        "Application code"
        CODE
        FLASH
        INTERN
        0x000C0000    
        0x0019FFFF /*TODO: use linker value since this varies depending on processor*/
        -1 -1 -1 -1 -1
      /end MEMORY_SEGMENT

      /begin MEMORY_SEGMENT AplCal
        "Application calibration (cal_page in Fujitsu_Linker.opt)"
        DATA
        FLASH
        INTERN
        /* TODO use linker symbol */ /*0x0000 */ /* @ECU_Address@__calpage_start@ */ /* __calpage_start */
        0x00080040
        /* TODO use linker symbol */ /*0x0000 */ /* @ECU_Address@__calpage_size@ */ /* __calpage_size */
        0x0001FFC0
        -1 -1 -1 -1 -1
        /begin IF_DATA XCP
          /begin SEGMENT
            0x01 /* segment logical number */
            0x02 /* number of pages */ /* reference page + working page */
            0x00 /* address extension */
            0x00 /* compression method */
            0x00 /* encryption method */
            /begin CHECKSUM
              XCP_ADD_11
              MAX_BLOCK_SIZE 0x1000
            /end CHECKSUM
            /begin PAGE
                0x00          /* page number  - reference page */
                ECU_ACCESS_WITH_XCP_ONLY
              	XCP_READ_ACCESS_WITH_ECU_ONLY
              	XCP_WRITE_ACCESS_NOT_ALLOWED
              	INIT_SEGMENT 1
            /end PAGE
            /begin PAGE
	            0x01          /* page number  - working page */
                ECU_ACCESS_WITH_XCP_ONLY
              	XCP_READ_ACCESS_WITH_ECU_ONLY
              	XCP_WRITE_ACCESS_WITH_ECU_ONLY
              	INIT_SEGMENT 1
            /end PAGE
          /end SEGMENT
        /end IF_DATA
      /end MEMORY_SEGMENT

      /begin MEMORY_SEGMENT IntRam        
        "Internal RAM - Measurements"
        VARIABLES
        RAM
        INTERN
        0x00010000
        0x00020000
        -1 -1 -1 -1 -1
      /end MEMORY_SEGMENT

    /end MOD_PAR

/begin IF_DATA XCP                      /* Insert this block within the MODULE block of the A2L file. */

    /begin PROTOCOL_LAYER
    
        0x0100                          /* XCP protocol layer 1.0 */
        
        2000                  /* T1 [ms] */
        2000                  /* T2 [ms] */
        2000                  /* T3 [ms] */
        2000                  /* T4 [ms] */
        2000                  /* T5 [ms] */
        2000                  /* T6 [ms] */
        2000                  /* T7 [ms] */
        
        8                     /* MAX_CTO */
        8                     /* MAX_DTO */
        
        BYTE_ORDER_MSB_FIRST
        ADDRESS_GRANULARITY_BYTE

        OPTIONAL_CMD SET_REQUEST
        OPTIONAL_CMD SET_MTA
        OPTIONAL_CMD UPLOAD
        OPTIONAL_CMD BUILD_CHECKSUM
        OPTIONAL_CMD TRANSPORT_LAYER_CMD
        OPTIONAL_CMD CLEAR_DAQ_LIST
        OPTIONAL_CMD SET_DAQ_PTR
        OPTIONAL_CMD WRITE_DAQ
        OPTIONAL_CMD SET_DAQ_LIST_MODE
        OPTIONAL_CMD START_STOP_DAQ_LIST
        OPTIONAL_CMD START_STOP_SYNCH
        OPTIONAL_CMD GET_DAQ_CLOCK
        
        
        
        OPTIONAL_CMD MODIFY_BITS
        OPTIONAL_CMD DOWNLOAD
        OPTIONAL_CMD DOWNLOAD_NEXT
        OPTIONAL_CMD SET_CAL_PAGE
        OPTIONAL_CMD GET_CAL_PAGE
        OPTIONAL_CMD COPY_CAL_PAGE
        OPTIONAL_CMD DOWNLOAD_MAX
        OPTIONAL_CMD GET_PAG_PROCESSOR_INFO
        OPTIONAL_CMD SET_SEGMENT_MODE
        OPTIONAL_CMD GET_SEGMENT_MODE
        OPTIONAL_CMD GET_COMM_MODE_INFO
        OPTIONAL_CMD GET_DAQ_LIST_INFO
        OPTIONAL_CMD GET_DAQ_PROCESSOR_INFO
        OPTIONAL_CMD GET_DAQ_RESOLUTION_INFO
        OPTIONAL_CMD GET_ID
        OPTIONAL_CMD SHORT_UPLOAD
        OPTIONAL_CMD GET_DAQ_LIST_MODE
        

        COMMUNICATION_MODE_SUPPORTED
             BLOCK
                 SLAVE
                 MASTER
                 0xff                               /* MAX_BS */
                 100               /* MIN_ST */

        

    /end PROTOCOL_LAYER
    
    /begin DAQ
    
        STATIC                         /* DAQ_CONFIG_TYPE */
        
        5                                 /* MAX_DAQ */
        5                       /* MAX_EVENT_CHANNEL */
        0                                           /* MIN_DAQ, i.e. the number of predefined DAQ lists */
        
        OPTIMISATION_TYPE_DEFAULT
        ADDRESS_EXTENSION_DAQ                     /* ADDR_EXTENSION_TYPE */
        IDENTIFICATION_FIELD_TYPE_ABSOLUTE
        
        GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE
        8                  /* MAX_ODT_ENTRY_SIZE_DAQ */
        
        NO_OVERLOAD_INDICATION
        RESUME_SUPPORTED
        
        
        
        /begin TIMESTAMP_SUPPORTED
            10                     /* TIMESTAMP_TICKS */
            SIZE_DWORD                      /* TIMESTAMP_SIZE */
            UNIT_1MS                /* TIMESTAMP_RESOLUTION */
        /end TIMESTAMP_SUPPORTED
        
        
        
        /begin DAQ_LIST                             /* DAQ0 */
            0                     /* DAQ_LIST_NUMBER */
            DAQ_LIST_TYPE   DAQ
            MAX_ODT         5
            MAX_ODT_ENTRIES 7
            FIRST_PID       0
            EVENT_FIXED     0
        /end DAQ_LIST        
        /begin DAQ_LIST                             /* DAQ1 */
            1                     /* DAQ_LIST_NUMBER */
            DAQ_LIST_TYPE   DAQ
            MAX_ODT         5
            MAX_ODT_ENTRIES 7
            FIRST_PID       5
            EVENT_FIXED     1
        /end DAQ_LIST        
        /begin DAQ_LIST                             /* DAQ2 */
            2                     /* DAQ_LIST_NUMBER */
            DAQ_LIST_TYPE   DAQ
            MAX_ODT         5
            MAX_ODT_ENTRIES 7
            FIRST_PID       10
            EVENT_FIXED     2
        /end DAQ_LIST        
        /begin DAQ_LIST                             /* DAQ3 */
            3                     /* DAQ_LIST_NUMBER */
            DAQ_LIST_TYPE   DAQ
            MAX_ODT         100
            MAX_ODT_ENTRIES 7
            FIRST_PID       15
            EVENT_FIXED     3
        /end DAQ_LIST        
        /begin DAQ_LIST                             /* DAQ4 */
            4                     /* DAQ_LIST_NUMBER */
            DAQ_LIST_TYPE   DAQ
            MAX_ODT         5
            MAX_ODT_ENTRIES 7
            FIRST_PID       115
            EVENT_FIXED     4
        /end DAQ_LIST

        /begin EVENT
            "20ms_Raster"                /* EVENT_CHANNEL_NAME */
            "20msRstr"          /* EVENT_CHANNEL_SHORT_NAME */
            0                /* EVENT_CHANNEL_NUMBER */
            DAQ_STIM                                /* EVENT_CHANNEL_DIRECTION */
            0xff                                    /* MAX_DAQ_LIST */
            2            /* TIME_CYCLE */
            7             /* TIME_UNIT */
            0                                       /* PRIORITY */
        /end EVENT
        /begin EVENT
            "60ms_Raster"                /* EVENT_CHANNEL_NAME */
            "60msRstr"          /* EVENT_CHANNEL_SHORT_NAME */
            1                /* EVENT_CHANNEL_NUMBER */
            DAQ_STIM                                /* EVENT_CHANNEL_DIRECTION */
            0xff                                    /* MAX_DAQ_LIST */
            6            /* TIME_CYCLE */
            7             /* TIME_UNIT */
            0                                       /* PRIORITY */
        /end EVENT
        /begin EVENT
            "100ms_Raster"                /* EVENT_CHANNEL_NAME */
            "100msRstr"          /* EVENT_CHANNEL_SHORT_NAME */
            2                /* EVENT_CHANNEL_NUMBER */
            DAQ_STIM                                /* EVENT_CHANNEL_DIRECTION */
            0xff                                    /* MAX_DAQ_LIST */
            10            /* TIME_CYCLE */
            7             /* TIME_UNIT */
            0                                       /* PRIORITY */
        /end EVENT
        /begin EVENT
            "250ms_Raster"                /* EVENT_CHANNEL_NAME */
            "250msRstr"          /* EVENT_CHANNEL_SHORT_NAME */
            3                /* EVENT_CHANNEL_NUMBER */
            DAQ_STIM                                /* EVENT_CHANNEL_DIRECTION */
            0xff                                    /* MAX_DAQ_LIST */
            25            /* TIME_CYCLE */
            7             /* TIME_UNIT */
            0                                       /* PRIORITY */
        /end EVENT
        /begin EVENT
            "500ms_Raster"                /* EVENT_CHANNEL_NAME */
            "500msRstr"          /* EVENT_CHANNEL_SHORT_NAME */
            4                /* EVENT_CHANNEL_NUMBER */
            DAQ_STIM                                /* EVENT_CHANNEL_DIRECTION */
            0xff                                    /* MAX_DAQ_LIST */
            50            /* TIME_CYCLE */
            7             /* TIME_UNIT */
            0                                       /* PRIORITY */
        /end EVENT
        
    /end DAQ
    
    /begin PAG
        2                            /* MAX_SEGMENTS */
        FREEZE_SUPPORTED
    /end PAG
    
    /begin PGM
        PGM_MODE_ABSOLUTE
        0                             /* MAX_SECTORS */
        0x08                                        /* MAX_CTO_PGM */

         
        COMMUNICATION_MODE_SUPPORTED
             BLOCK
                 SLAVE
                 MASTER
                 0xff                               /* MAX_BS_PGM */
                 100               /* MIN_ST_PGM */
        
    /end PGM
    
    /begin XCP_ON_CAN
    
        0x0100                                      /* XCP on CAN 1.0 */
        CAN_ID_BROADCAST 0x98FF5BFA       /* auto-detection */
        CAN_ID_MASTER    0x98FF5BF9          /* CMD/STIM */
        CAN_ID_SLAVE     0x98FF5A7A           /* RES/ERR/EV/SERV/DAQ */
        BAUDRATE         500000               /* In Hz */
        SAMPLE_POINT     75           /* Percentage of complete bit time. */
        SAMPLE_RATE      SINGLE
        BTL_CYCLES       0             /* Slots per bit time. */
        SJW              2                    /* Length of the synch segment. */
        SYNC_EDGE        SINGLE
        
        /begin DAQ_LIST_CAN_ID
            0                     /* DAQ_LIST_NUMBER */
            FIXED 0x98FF5A7A                 /* CAN msg ID */
        /end DAQ_LIST_CAN_ID        
        /begin DAQ_LIST_CAN_ID
            1                     /* DAQ_LIST_NUMBER */
            FIXED 0x98FF5A7A                 /* CAN msg ID */
        /end DAQ_LIST_CAN_ID        
        /begin DAQ_LIST_CAN_ID
            2                     /* DAQ_LIST_NUMBER */
            FIXED 0x98FF5A7A                 /* CAN msg ID */
        /end DAQ_LIST_CAN_ID        
        /begin DAQ_LIST_CAN_ID
            3                     /* DAQ_LIST_NUMBER */
            FIXED 0x98FF5A7A                 /* CAN msg ID */
        /end DAQ_LIST_CAN_ID        
        /begin DAQ_LIST_CAN_ID
            4                     /* DAQ_LIST_NUMBER */
            FIXED 0x98FF5A7A                 /* CAN msg ID */
        /end DAQ_LIST_CAN_ID

    /end XCP_ON_CAN


/end IF_DATA


    /begin RECORD_LAYOUT Scalar_BOOLEAN
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_UBYTE
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_BYTE
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_UWORD
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_SWORD
      FNC_VALUES 1 SWORD COLUMN_DIR DIRECT
    /end RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_ULONG
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_LONG
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_FLOAT32_IEEE
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Scalar_FLOAT64_IEEE
      FNC_VALUES  1 FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    
    /begin RECORD_LAYOUT Lookup1D_BYTE
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_BYTE
      AXIS_PTS_X  1 SBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_UBYTE
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_UBYTE
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_UWORD
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_UWORD
      AXIS_PTS_X  1 UWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_WORD
      FNC_VALUES  1 SWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_WORD
      AXIS_PTS_X  1 SWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_ULONG
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_ULONG
      AXIS_PTS_X  1 ULONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_SLONG
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_LONG
      AXIS_PTS_X  1 SLONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_FLOAT32_IEEE
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_FLOAT32_IEEE
      AXIS_PTS_X  1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_FLOAT64_IEEE
      FNC_VALUES  1 FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup1D_X_FLOAT64_IEEE
      AXIS_PTS_X  1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_UBYTE
      FNC_VALUES  1 UBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_UBYTE
      AXIS_PTS_X  1 UBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_BYTE
      FNC_VALUES  1 SBYTE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_BYTE
      AXIS_PTS_X  1 SBYTE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_UWORD
      FNC_VALUES  1 UWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_UWORD
      AXIS_PTS_X  1 UWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_WORD
      FNC_VALUES  1 SWORD COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_WORD
      AXIS_PTS_X  1 SWORD INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_ULONG
      FNC_VALUES  1 ULONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_ULONG
      AXIS_PTS_X  1 ULONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_LONG
      FNC_VALUES  1 SLONG COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_LONG
      AXIS_PTS_X  1 SLONG INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_FLOAT32_IEEE
      FNC_VALUES  1 FLOAT32_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_FLOAT32_IEEE
      AXIS_PTS_X 1 FLOAT32_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_FLOAT64_IEEE
      FNC_VALUES  1  FLOAT64_IEEE COLUMN_DIR DIRECT
    /end   RECORD_LAYOUT
    
    /begin RECORD_LAYOUT Lookup2D_X_FLOAT64_IEEE
      AXIS_PTS_X 1 FLOAT64_IEEE INDEX_INCR DIRECT
    /end   RECORD_LAYOUT


/* @INSERT_SIMULINK_A2LS_AFTER@ */

/* @INSERT_SIMULINK_A2LS_BEFORE@ */


  /end MODULE

/end PROJECT
